## Lab 5: Interrupt

### Introduction
In Lab 5, the primary goal was to implement an interrupt-driven algorithm for reading quadrature encoder signals and converting them into motor velocity and direction readings. A quadrature encoder produces two offset pulse signals that can be interpreted to detect both the speed and direction of a rotating motor. By monitoring these signals, it is possible to determine whether the motor is moving clockwise or counter-clockwise and calculate the rotational speed in revolutions per second. This lab aims to accurately read these encoder pulses using interrupt-based routines on the MCU and display the measured speed and direction with a refresh rate of at least 1 Hz.

### Design and Testing Methodology
The design of this system primarily involved configuring two GPIO pins on the MCU to receive the quadrature encoder's A and B signals, with PA5 and PA8 designated for this purpose. External interrupts (EXTI) were configured on these pins to detect falling edges, thus triggering an interrupt on each pulse received from the encoder. This enabled precise tracking of pulse events for calculating speed and determining the direction. The phase relationship between the two signals was used to infer the direction of rotation: when signal A leads signal B, the motor was identified as rotating clockwise, and vice versa for counter-clockwise.

In addition to the GPIO and EXTI setup, two timers were configured on the MCU. TIM16 was used to measure the time intervals between successive pulses, while TIM2 was configured to enforce a 0.5 Hz delay for the periodic display of results. The motor’s velocity in revolutions per second was calculated by inversely relating the interval time to speed, based on the formula `speed = 1 / (0.000001 * interval * 120 * 4)`. This formula incorporated constants to account for the characteristics of the quadrature encoder, such as its pulses per revolution (120) and phase offsets (90°). Finally, the calculated velocity and direction were displayed via a USART output with a 0.5 Hz refresh rate.

### Technical Documentation
The source code for the project can be found in the associated [Github repository](https://github.com/ZhianZ/e155-lab5).
![](./images/lab5_flow_chart.jpg)
*Figure 1. Flowchart illustrating the main steps of the program and function calls.*

![](./images/lab5_schematics.JPG)
*Figure 2. Schematic of the physical circuit*

### Results and Discussion
The implemented system successfully captured the direction of motor rotation and calculated the rotational velocity, displaying these values on debug terminal with a 0.5 Hz refresh rate. The direction detection proved to be accurate due to the use of phase analysis between signals A and B, which consistently indicated whether the motor was moving clockwise or counter-clockwise. For the velocity measurement, the calculated speed in revolutions per second is closed to the motor’s actual speed but not very accurate.

One primary source of error in the velocity calculation was the reliance on a single, short time interval between pulses. Since the time interval measured between two consecutive pulses is quite small, minor variations or noise can lead to significant fluctuations in calculated speed. A more robust approach would involve measuring the time over several pulse intervals—e.g., capturing the cumulative time for `n` pulses and calculating velocity based on the average interval. Implementing this would likely improve the system’s accuracy without adding substantial complexity to the code, as it could be handled by a simple counter and cumulative timer mechanism within the interrupt routine.

Despite these minor issues, the system achieved reliable performance in measuring and displaying the motor’s speed and direction, with USART output providing real-time feedback to the user.

### Conclusion
This lab demonstrated a successful implementation of an interrupt-driven quadrature encoder interface on an MCU. By utilizing GPIO and timer configurations alongside external interrupts, the system was able to reliably track motor speed and direction, which were displayed via USART at a consistent update rate. I spent approximately 12 hours working on this lab.